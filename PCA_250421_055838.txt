import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Load Iris dataset
iris = load_iris()
X = iris.data
y = iris.target
feature_names = iris.feature_names
target_names = iris.target_names

# Standardize the data (important for PCA)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Perform PCA
pca = PCA()
X_pca = pca.fit_transform(X_scaled)

# Determine optimal number of components
cumulative_variance = np.cumsum(pca.explained_variance_ratio_)

# Plot explained variance
plt.figure(figsize=(10, 5))
plt.bar(range(1, len(pca.explained_variance_ratio_)+1), 
        pca.explained_variance_ratio_, 
        alpha=0.5, 
        align='center',
        label='Individual explained variance')
plt.step(range(1, len(cumulative_variance)+1), 
         cumulative_variance, 
         where='mid',
         label='Cumulative explained variance')
plt.ylabel('Explained variance ratio')
plt.xlabel('Principal component index')
plt.legend(loc='best')
plt.title('Explained Variance by Principal Components')
plt.show()

# Select first 2 principal components (for visualization)
n_components = 2
pca = PCA(n_components=n_components)
X_pca = pca.fit_transform(X_scaled)

# Visualize in 2D space
plt.figure(figsize=(8, 6))
colors = ['navy', 'turquoise', 'darkorange']
lw = 2

for color, i, target_name in zip(colors, [0, 1, 2], target_names):
    plt.scatter(X_pca[y == i, 0], X_pca[y == i, 1],
                color=color, alpha=.8, lw=lw,
                label=target_name)
plt.legend(loc='best', shadow=False, scatterpoints=1)
plt.title(f'PCA of IRIS dataset (First {n_components} components)')
plt.xlabel('Principal Component 1 ({:.1f}% variance)'.format(
    pca.explained_variance_ratio_[0]*100))
plt.ylabel('Principal Component 2 ({:.1f}% variance)'.format(
    pca.explained_variance_ratio_[1]*100))
plt.show()

# Print component loadings
print("\nPrincipal Component Loadings:")
loadings = pd.DataFrame(pca.components_.T,
                       columns=[f'PC{i+1}' for i in range(n_components)],
                       index=feature_names)
print(loadings)